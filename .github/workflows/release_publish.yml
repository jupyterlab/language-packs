name: Create Release and publish packages

on:
  push: 
    branches: ['master', ]
    # Launch if any .bumpversion.cfg files got modify on 'master' branch
    paths: ['language-packs/*/.bumpversion.cfg', ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # First of all check that all language packs have homogeneous version.
  check-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Check version homogeneity
        run: |
          python -m pip install bump2version
          python scripts/04_check_version.py

  publish:
    name: 'Publish ${{ matrix.locale }}'
    needs: check-version
    runs-on: ubuntu-latest
    env:
      CURRENT_LOCALE: ${{ matrix.locale }}
    strategy:
      fail-fast: false
      matrix:
        locale:
          # Should list all available locales
          - ar-SA
          - ca-ES
          - cs-CZ
          - da-DK
          - de-DE
          - el-GR
          - es-ES
          - et-EE
          - fi-FI
          - fr-FR
          - he-IL
          - hu-HU
          - id-ID
          - it-IT
          - ja-JP
          - ko-KR
          - nl-NL
          - no-NO
          - pl-PL
          - pt-BR
          - ro-RO
          - ru-RU
          - tr-TR
          - uk-UA
          - vi-VN
          - zh-CN
          - zh-TW
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip twine check-manifest wheel
    - name: Prepare env variables
      run: |
        echo "CURRENT_TAG=${CURRENT_LOCALE}@v$(python .github/scripts/get_version.py)" >> $GITHUB_ENV
        echo "CURRENT_LOCALE_DIR=language-packs/jupyterlab-language-pack-${CURRENT_LOCALE}" >> $GITHUB_ENV
    - name: Build release artifacts
      run: |
        cd ${{ env.CURRENT_LOCALE_DIR }}
        check-manifest -v --ignore-bad-ideas *.mo
        python setup.py sdist bdist_wheel
        python -m twine check dist/*
    - name: Create Release
      run: |
        hub release create \
        ${{ env.CURRENT_TAG }} \
        -m "Release ${{ env.CURRENT_TAG }}" \
        -a ${{ env.CURRENT_LOCALE_DIR }}/dist/* 
      env:
        GITHUB_USER: ${{ secrets.GITHUB_USER }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish PyPI Package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      shell: bash
      run: |
        cd ${{ env.CURRENT_LOCALE_DIR }}
        counter=0
        max_retry=6
        until python -m twine upload dist/*
        do
            echo "Backing off for 10 seconds - PyPI is busy or not available"
            sleep 10
            [[ counter -eq $max_retry ]] && echo "Could not upload within 1 minute, giving up!" && exit 1
            ((counter++))
        done
